from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from datetime import datetime, timedelta
import json
import os
import secrets
import re
from typing import List, Optional
import uvicorn

app = FastAPI(
    title="Certificate Authority API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
class CertificateRequest(BaseModel):
    name: str
    email: str  # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ EmailStr

class RevokeRequest(BaseModel):
    certificateId: str

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_FILE = "certificates.json"
CERT_VALIDITY_DAYS = 365

def validate_email(email: str) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email"""
    if not email or '@' not in email:
        return False
    return True

def load_certificates() -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(DB_FILE):
            with open(DB_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")
    
    return {"certificates": []}

def save_certificates(data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False, default=str)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")
        raise

def generate_certificate_id() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    return secrets.token_hex(4).upper()

def create_self_signed_certificate(name: str, email: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è RSA –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ subject –∏ issuer
    subject = issuer = x509.Name([
        x509.NameAttribute(NameOID.COMMON_NAME, name),
        x509.NameAttribute(NameOID.EMAIL_ADDRESS, email),
        x509.NameAttribute(NameOID.ORGANIZATION_NAME, "Certificate Authority"),
        x509.NameAttribute(NameOID.COUNTRY_NAME, "RU"),
    ])

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    certificate = x509.CertificateBuilder().subject_name(
        subject
    ).issuer_name(
        issuer
    ).public_key(
        private_key.public_key()
    ).serial_number(
        x509.random_serial_number()
    ).not_valid_before(
        datetime.utcnow()
    ).not_valid_after(
        datetime.utcnow() + timedelta(days=CERT_VALIDITY_DAYS)
    ).add_extension(
        x509.BasicConstraints(ca=False, path_length=None), critical=True,
    ).sign(private_key, hashes.SHA256())

    return certificate, private_key

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "–°–µ—Ä–≤–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!",
        "endpoints": {
            "generate": "POST /api/generate-certificate",
            "revoke": "POST /api/revoke-certificate", 
            "check_status": "GET /api/check-status/{id}",
            "list_certificates": "GET /api/certificates",
            "server_info": "GET /api/server-info"
        }
    }

@app.get("/api/server-info")
async def server_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    db = load_certificates()
    stats = {
        "active": len([c for c in db["certificates"] if c["status"] == "active"]),
        "revoked": len([c for c in db["certificates"] if c["status"] == "revoked"]),
        "total": len(db["certificates"])
    }
    
    return {
        "server": "Python Certificate Authority",
        "version": "1.0.0",
        "status": "running",
        "certificates": stats
    }

@app.post("/api/generate-certificate")
async def generate_certificate(request: CertificateRequest):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    try:
        print(f"üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è: {request.name} ({request.email})")
        
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if not request.name.strip():
            raise HTTPException(status_code=400, detail="–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if not request.email.strip():
            raise HTTPException(status_code=400, detail="Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if not validate_email(request.email):
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        certificate, private_key = create_self_signed_certificate(request.name, request.email)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PEM —Ñ–æ—Ä–º–∞—Ç
        certificate_pem = certificate.public_bytes(serialization.Encoding.PEM).decode('utf-8')
        private_key_pem = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        ).decode('utf-8')

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ë–î
        cert_id = generate_certificate_id()
        certificate_record = {
            "id": cert_id,
            "commonName": request.name,
            "email": request.email,
            "status": "active",
            "serialNumber": str(certificate.serial_number),
            "issuedAt": datetime.utcnow().isoformat(),
            "expiresAt": (datetime.utcnow() + timedelta(days=CERT_VALIDITY_DAYS)).isoformat(),
            "revokedAt": None
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        db = load_certificates()
        db["certificates"].append(certificate_record)
        save_certificates(db)

        print(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω: ID {cert_id}")
        
        return {
            "success": True,
            "message": "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            "certificate": certificate_pem,
            "privateKey": private_key_pem,
            "id": cert_id
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {str(e)}")

@app.post("/api/revoke-certificate")
async def revoke_certificate(request: RevokeRequest):
    """–û—Ç–∑—ã–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    try:
        print(f"üö´ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {request.certificateId}")
        
        db = load_certificates()
        certificate = None
        cert_index = -1
        
        # –ü–æ–∏—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        for i, cert in enumerate(db["certificates"]):
            if cert["id"] == request.certificateId:
                certificate = cert
                cert_index = i
                break
        
        if not certificate:
            raise HTTPException(status_code=404, detail="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if certificate["status"] == "revoked":
            raise HTTPException(status_code=400, detail="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ –æ—Ç–æ–∑–≤–∞–Ω")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        db["certificates"][cert_index]["status"] = "revoked"
        db["certificates"][cert_index]["revokedAt"] = datetime.utcnow().isoformat()
        save_certificates(db)
        
        print(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–æ–∑–≤–∞–Ω: {request.certificateId}")
        
        return {
            "success": True,
            "message": f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {request.certificateId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω"
        }

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {str(e)}")

@app.get("/api/check-status/{certificate_id}")
async def check_status(certificate_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {certificate_id}")
        
        db = load_certificates()
        
        for certificate in db["certificates"]:
            if certificate["id"] == certificate_id:
                print(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω: {certificate['commonName']}")
                return {
                    "success": True,
                    **certificate
                }
        
        print(f"‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {certificate_id}")
        raise HTTPException(status_code=404, detail="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@app.get("/api/certificates")
async def get_certificates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    try:
        print("üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
        
        db = load_certificates()
        certificates = db["certificates"]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        active_count = len([c for c in certificates if c["status"] == "active"])
        revoked_count = len([c for c in certificates if c["status"] == "revoked"])
        
        return {
            "success": True,
            "list": certificates,
            "stats": {
                "active": active_count,
                "revoked": revoked_count,
                "total": len(certificates)
            }
        }

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    return JSONResponse(
        status_code=exc.status_code,
        content={"success": False, "error": exc.detail}
    )

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    print(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
    return JSONResponse(
        status_code=500,
        content={"success": False, "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
    )

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Python —Å–µ—Ä–≤–µ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏...")
    print("üìç –ê–¥—Ä–µ—Å: http://localhost:3001")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:3001/docs")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ë–î –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.exists(DB_FILE):
        save_certificates({"certificates": []})
        print("üìÅ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=3001,
        log_level="info"
    )